name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v0.x.0

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Validate the release
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      prerelease: ${{ steps.version.outputs.prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "prerelease=false" >> $GITHUB_OUTPUT
          else
            echo "prerelease=true" >> $GITHUB_OUTPUT
          fi

      - name: Verify version in Cargo.toml
        run: |
          CARGO_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "//' | sed 's/"//')
          if [ "$CARGO_VERSION" != "${{ steps.version.outputs.version }}" ]; then
            echo "Version mismatch: git tag has ${{ steps.version.outputs.version }}, Cargo.toml has $CARGO_VERSION"
            exit 1
          fi

      - name: Run full test suite
        run: |
          cargo test --workspace --verbose
          cargo clippy --workspace --all-targets --all-features -- -D warnings -A clippy::uninlined_format_args

  # Build release binaries
  build-binaries:
    name: Build Release Binaries
    needs: validate
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: domain-check-linux-x86_64
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: domain-check-linux-x86_64-musl
          - target: x86_64-apple-darwin
            os: macos-latest
            name: domain-check-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: domain-check-macos-aarch64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: domain-check-windows-x86_64.exe
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
            target
          key: ${{ runner.os }}-${{ matrix.target }}-release-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }} -p domain-check

      - name: Package binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar -czf ${{ matrix.name }}.tar.gz domain-check
          echo "ASSET_PATH=target/${{ matrix.target }}/release/${{ matrix.name }}.tar.gz" >> $GITHUB_ENV
          echo "ASSET_NAME=${{ matrix.name }}.tar.gz" >> $GITHUB_ENV

      - name: Package binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a ${{ matrix.name }}.zip domain-check.exe
          echo "ASSET_PATH=target/${{ matrix.target }}/release/${{ matrix.name }}.zip" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "ASSET_NAME=${{ matrix.name }}.zip" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: ${{ env.ASSET_PATH }}

  # Publish to crates.io
  publish-crates:
    name: Publish to Crates.io
    needs: [validate, build-binaries]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
            target
          key: ubuntu-latest-publish-${{ hashFiles('**/Cargo.lock') }}

      - name: Verify workspace builds
        run: |
          cargo build --release -p domain-check-lib
          cargo build --release -p domain-check

      - name: Dry run library publish
        run: cargo publish --dry-run -p domain-check-lib

      - name: Publish library to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          echo "🚀 Publishing domain-check-lib v${{ needs.validate.outputs.version }}..."
          
          # Capture both stdout and stderr, and the exit code
          set +e
          output=$(cargo publish -p domain-check-lib 2>&1)
          exit_code=$?
          set -e
          
          echo "Publish output:"
          echo "$output"
          echo "Exit code: $exit_code"
          
          if [ $exit_code -eq 0 ]; then
            echo "✅ domain-check-lib published successfully!"
            echo "LIBRARY_PUBLISHED=true" >> $GITHUB_ENV
          elif [ $exit_code -eq 101 ] && echo "$output" | grep -q "already exists"; then
            echo "✅ domain-check-lib v${{ needs.validate.outputs.version }} already exists on crates.io"
            echo "🔄 Continuing with existing version..."
            echo "LIBRARY_PUBLISHED=existing" >> $GITHUB_ENV
          else
            echo "❌ Failed to publish domain-check-lib (exit code: $exit_code)"
            echo "Error output: $output"
            exit 1
          fi

      - name: Wait for crates.io indexing
        run: |
          if [ "$LIBRARY_PUBLISHED" = "true" ]; then
            echo "⏳ Waiting 90 seconds for crates.io to index newly published library..."
            sleep 90
          else
            echo "📚 Library already existed, shorter wait for index refresh..."
            sleep 30
          fi
          
          # Verify library is available
          echo "🔍 Verifying library availability..."
          for i in {1..5}; do
            if cargo search domain-check-lib --limit 1 | grep -q "domain-check-lib"; then
              echo "✅ Library confirmed available on crates.io"
              break
            else
              echo "⏳ Attempt $i: Library not yet indexed, waiting 15s..."
              sleep 15
            fi
          done

      - name: Publish CLI to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          echo "🚀 Publishing domain-check v${{ needs.validate.outputs.version }}..."
          
          # Capture both stdout and stderr, and the exit code
          set +e
          output=$(cargo publish -p domain-check --allow-dirty 2>&1)
          exit_code=$?
          set -e
          
          echo "Publish output:"
          echo "$output"
          echo "Exit code: $exit_code"
          
          if [ $exit_code -eq 0 ]; then
            echo "✅ domain-check published successfully!"
          elif [ $exit_code -eq 101 ] && echo "$output" | grep -q "already exists"; then
            echo "✅ domain-check v${{ needs.validate.outputs.version }} already exists on crates.io"
            echo "🔄 Release continues with existing version..."
          else
            echo "❌ Failed to publish domain-check (exit code: $exit_code)"
            echo "Error output: $output"
            exit 1
          fi

      - name: Verify publications
        run: |
          echo "🔍 Final verification of published crates..."
          
          # Verify library
          if cargo search domain-check-lib --limit 1 | grep -q "domain-check-lib"; then
            echo "✅ domain-check-lib confirmed on crates.io"
          else
            echo "⚠️ domain-check-lib not found on crates.io"
          fi
          
          # Verify CLI
          if cargo search domain-check --limit 1 | grep -q "^domain-check "; then
            echo "✅ domain-check confirmed on crates.io"
          else
            echo "⚠️ domain-check not found on crates.io"
          fi
          
          echo "🎉 Crate publishing completed successfully!"

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    needs: [validate, build-binaries, publish-crates]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          # Move all artifacts to a single directory
          mkdir -p release-assets
          find artifacts -name "*.tar.gz" -o -name "*.zip" | while read file; do
            cp "$file" release-assets/
          done
          
          ls -la release-assets/

      - name: Create release with GitHub CLI
        id: create_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          TAG="v${VERSION}"
          
          # Create release notes
          cat > release_notes.md << EOF
          # 🚀 Domain Check v${VERSION}

          ## 📦 Installation

          **Homebrew:**
          \`\`\`bash
          brew tap saidutt46/domain-check
          brew install domain-check
          \`\`\`

          **Cargo:**
          \`\`\`bash
          # Library
          cargo add domain-check-lib@${VERSION}
          
          # CLI
          cargo install domain-check@${VERSION}
          \`\`\`

          **Download Binaries:** Available below for all platforms

          ## 🔄 Backward Compatibility
          ✅ 100% backward compatible - all existing commands work unchanged

          See [CHANGELOG.md](https://github.com/saidutt46/domain-check/blob/v${VERSION}/CHANGELOG.md) for complete details.
          EOF
          
          # Create the release
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "✅ Release $TAG already exists, updating..."
            gh release upload "$TAG" release-assets/* --clobber || echo "No new assets to upload"
            RELEASE_ID=$(gh release view "$TAG" --json id -q .id)
          else
            echo "🚀 Creating new release $TAG..."
            gh release create "$TAG" \
              --title "Domain Check v${VERSION}" \
              --notes-file release_notes.md \
              $([ "${{ needs.validate.outputs.prerelease }}" = "true" ] && echo "--prerelease" || echo "") \
              release-assets/*
            RELEASE_ID=$(gh release view "$TAG" --json id -q .id)
          fi
          
          echo "id=$RELEASE_ID" >> $GITHUB_OUTPUT
          echo "✅ GitHub release completed!"

  # NEW: Update Homebrew formula
  update-homebrew:
    name: Update Homebrew Formula
    needs: [validate, create-release]
    runs-on: ubuntu-latest
    if: needs.validate.outputs.prerelease == 'false'  # Only for stable releases
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download macOS artifacts for Homebrew
        uses: actions/download-artifact@v4
        with:
          name: domain-check-macos-x86_64
          path: ./macos-x86_64

      - name: Download macOS ARM artifacts for Homebrew  
        uses: actions/download-artifact@v4
        with:
          name: domain-check-macos-aarch64
          path: ./macos-aarch64

      - name: Calculate SHA256 checksums
        id: checksums
        run: |
          # Calculate SHA256 for both architectures
          X86_64_SHA=$(sha256sum ./macos-x86_64/domain-check-macos-x86_64.tar.gz | cut -d' ' -f1)
          AARCH64_SHA=$(sha256sum ./macos-aarch64/domain-check-macos-aarch64.tar.gz | cut -d' ' -f1)
          
          echo "x86_64_sha=$X86_64_SHA" >> $GITHUB_OUTPUT
          echo "aarch64_sha=$AARCH64_SHA" >> $GITHUB_OUTPUT
          
          echo "x86_64 SHA256: $X86_64_SHA"
          echo "aarch64 SHA256: $AARCH64_SHA"

      - name: Update Homebrew formula
        env:
          GITHUB_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}  # New secret needed
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          X86_64_SHA="${{ steps.checksums.outputs.x86_64_sha }}"
          AARCH64_SHA="${{ steps.checksums.outputs.aarch64_sha }}"
          
          # Clone the homebrew tap repository
          git clone https://x-access-token:${GITHUB_TOKEN}@github.com/saidutt46/homebrew-domain-check.git tap-repo
          cd tap-repo
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create/update the formula
          cat > Formula/domain-check.rb << EOF
          class DomainCheck < Formula
            desc "Fast, powerful CLI tool for checking domain availability using RDAP and WHOIS"
            homepage "https://github.com/saidutt46/domain-check"
            version "${VERSION}"
            license "Apache-2.0"
          
            if Hardware::CPU.arm?
              url "https://github.com/saidutt46/domain-check/releases/download/v${VERSION}/domain-check-macos-aarch64.tar.gz"
              sha256 "${AARCH64_SHA}"
            else
              url "https://github.com/saidutt46/domain-check/releases/download/v${VERSION}/domain-check-macos-x86_64.tar.gz"
              sha256 "${X86_64_SHA}"
            end
          
            def install
              bin.install "domain-check"
            end
          
            test do
              assert_match version.to_s, shell_output("#{bin}/domain-check --version")
              # Test basic functionality
              assert_match "TAKEN", shell_output("#{bin}/domain-check google.com")
            end
          end
          EOF
          
          # Commit and push
          git add Formula/domain-check.rb
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update domain-check to v${VERSION}"
            git push origin main
            echo "✅ Homebrew formula updated to v${VERSION}"
          fi

  # Post-release verification
  verify-release:
    name: Verify Release
    needs: [validate, create-release, update-homebrew]
    runs-on: ubuntu-latest
    steps:
      - name: Wait for crates.io propagation
        run: sleep 120

      - name: Test library installation
        run: |
          cargo init test-lib-install
          cd test-lib-install
          cargo add domain-check-lib@${{ needs.validate.outputs.version }}
          
          # Create simple test
          cat > src/main.rs << 'EOF'
          use domain_check_lib::DomainChecker;
          
          #[tokio::main]
          async fn main() {
              let checker = DomainChecker::new();
              println!("Library installation test successful!");
          }
          EOF
          
          echo 'tokio = { version = "1", features = ["full"] }' >> Cargo.toml
          cargo build

      - name: Test CLI installation
        run: |
          cargo install domain-check@${{ needs.validate.outputs.version }}
          domain-check --version

      - name: Notify success
        run: |
          echo "✅ Release v${{ needs.validate.outputs.version }} completed successfully!"
          echo "📦 Library: https://crates.io/crates/domain-check-lib"
          echo "🖥️ CLI: https://crates.io/crates/domain-check"
          echo "🍺 Homebrew: brew tap saidutt46/domain-check && brew install domain-check"
          echo "📋 Release: https://github.com/saidutt46/domain-check/releases/tag/v${{ needs.validate.outputs.version }}"